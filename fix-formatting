#!/usr/bin/env python3
#
# Used to fix formatting in recipes

import re
from pathlib import Path
from typing import Callable, Final, Sequence, TypeAlias

RECIPES_DIR: Final[Path] = Path(__file__).parent / "recipes"

Formatter: TypeAlias = tuple[re.Pattern, Callable[[re.Match], str]]


def format_fractions(match: re.Match) -> str:
    return f"$\\frac{{{match.group(1)}}}{{{match.group(2)}}}$"


def format_quotes(match: re.Match) -> str:
    if match.group(1) == "”":
        return '"'

    if match.group(1) == "“":
        return '"'

    if match.group(1) == "’":
        return "'"

    if match.group(1) == "‘":
        return "'"

    raise ValueError(f"Unknown quote type: {match.group(1)}")


def format_tbsp(match: re.Match) -> str:
    return "Tbsp"


def format_temperature(match: re.Match) -> str:
    return f"{match.group(1)}°{match.group(2)}"


FORMATTERS: Final[Sequence[Formatter]] = [
    (re.compile(r"(\d+)/(\d+)"), format_fractions),
    (re.compile(r"([”“’‘])"), format_quotes),
    (re.compile(r"tbsp"), format_tbsp),
    (re.compile(r"(\d+)\s?([CF])\b"), format_temperature),
]


def main():
    for recipe in RECIPES_DIR.iterdir():
        if recipe.suffix != ".md":
            continue

        print()
        print()
        print(f"Processing {recipe}...")

        output = ""
        with open(recipe, "r") as f:
            for line in f.readlines():
                output += reformat(line, FORMATTERS)

        with open(recipe, "w") as f:
            f.write(output)


def reformat(line: str, formatters: Sequence[Formatter]) -> str:
    reformatted_line = line
    for pattern, fn in formatters:
        candidate = re.sub(pattern, fn, reformatted_line)

        if reformatted_line != candidate:
            reformatted_line = prompt_for_replace_line(reformatted_line, candidate)

    return reformatted_line


def prompt_for_replace_line(original: str, new: str) -> str:
    print()
    print(f"Original: {original.strip()}")
    print(f"New:      {new.strip()}")
    accept = input("Accept changes? [Y/n]")

    if accept in ["y", "Y", ""]:
        return new

    return original


if __name__ == "__main__":
    main()
